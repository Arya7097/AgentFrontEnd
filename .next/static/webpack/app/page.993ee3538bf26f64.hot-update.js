"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/app/pages/Upload/Upload.tsx":
/*!*****************************************!*\
  !*** ./src/app/pages/Upload/Upload.tsx ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Dashboard)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-jsx/style */ \"(app-pages-browser)/./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_chartjs_2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-chartjs-2 */ \"(app-pages-browser)/./node_modules/react-chartjs-2/dist/index.js\");\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! chart.js */ \"(app-pages-browser)/./node_modules/chart.js/dist/chart.js\");\n/* harmony import */ var _barrel_optimize_names_BsUpload_react_icons_bs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=BsUpload!=!react-icons/bs */ \"(app-pages-browser)/./node_modules/react-icons/bs/index.mjs\");\n/* harmony import */ var chartjs_plugin_zoom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! chartjs-plugin-zoom */ \"(app-pages-browser)/./node_modules/chartjs-plugin-zoom/dist/chartjs-plugin-zoom.esm.js\");\n// \"use client\";\n// import { useState, useEffect } from \"react\";\n// import { Bar, Line, Doughnut, Pie, Scatter } from \"react-chartjs-2\";\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   LineElement,\n//   PointElement,\n//   ArcElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n// } from \"chart.js\";\n// import { BsUpload } from \"react-icons/bs\";\n// import zoomPlugin from \"chartjs-plugin-zoom\";\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   LineElement,\n//   PointElement,\n//   ArcElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n//   zoomPlugin\n// );\n// interface ChartData {\n//   labels: string[];\n//   datasets: {\n//     label: string;\n//     data: number[];\n//     backgroundColor?: string;\n//     borderColor?: string;\n//     fill?: boolean;\n//   }[];\n// }\n// export default function Dashboard() {\n//   const [chartData, setChartData] = useState<Record<string, ChartData | null>>({\n//     scatterChartData: null,\n//     pieChartData: null,\n//     donutChartData: null,\n//     lineChartData: null,\n//     barChartData: null,\n//   });\n//   const [selectedFile, setSelectedFile] = useState<File | null>(null);\n//   const [selectedChart, setSelectedChart] = useState<string>(\"\");\n//   const [loading, setLoading] = useState<boolean>(false);\n//   const [chartWidth, setChartWidth] = useState<number>(0);\n//   const [selectedLabels, setSelectedLabels] = useState<string[]>([]);\n//   const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setSelectedFile(event.target.files?.[0] || null);\n//   };\n//   const handleSubmit = async () => {\n//     if (!selectedFile) return;\n//     setLoading(true);\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n//     try {\n//       const response = await fetch(\"http://localhost:3012/api/analyze-excel\", {\n//         method: \"POST\",\n//         body: formData,\n//       });\n//       if (!response.ok) throw new Error(\"Error uploading file.\");\n//       const result = await response.json();\n//       const processedData = result.data?.processedData;\n//       if (!processedData) throw new Error(\"Invalid response structure.\");\n//       const generateChartData = (chartType: string): ChartData | null => {\n//         const chartInfo = processedData[chartType]?.[0];\n//         if (!chartInfo) return null;\n//         const labels = Object.keys(chartInfo.data);\n//         const values = Object.values(chartInfo.data);\n//         return {\n//           labels,\n//           datasets: [\n//             {\n//               label: chartInfo.label || chartType,\n//               data: values as number[],\n//               backgroundColor: chartType.includes(\"Bar\")\n//                 ? \"rgba(54, 162, 235, 0.5)\"\n//                 : \"rgba(255, 99, 132, 0.5)\",\n//               borderColor: chartType.includes(\"Line\")\n//                 ? \"rgba(255, 99, 132, 1)\"\n//                 : undefined,\n//               fill: !chartType.includes(\"Line\"),\n//             },\n//           ],\n//         };\n//       };\n//       setChartData({\n//         scatterChartData: generateChartData(\"Scatter Plot\"),\n//         pieChartData: generateChartData(\"Pie Chart\"),\n//         donutChartData: generateChartData(\"Donut Chart\"),\n//         lineChartData: generateChartData(\"Line Chart\"),\n//         barChartData: generateChartData(\"Bar Chart\"),\n//       });\n//     } catch (error) {\n//       console.error(\"Error uploading file:\", error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   useEffect(() => {\n//     if (selectedChart && chartData[selectedChart]) {\n//       const baseLabels = chartData[selectedChart]?.labels || [];\n//       setChartWidth((selectedLabels.length || baseLabels.length) * 150);\n//     }\n//   }, [selectedChart, selectedLabels, chartData]);\n//   const getChartOptions = (type: string) => ({\n//     responsive: true,\n//     maintainAspectRatio: false,\n//     scales: [\"pieChartData\", \"donutChartData\"].includes(type)\n//       ? {}\n//       : {\n//           x: {\n//             ticks: {\n//               autoSkip: false,\n//               maxRotation: type === 'barChartData' || type === 'scatterChartData' ? 20 : 100,\n//               minRotation: type === 'barChartData' || type === 'scatterChartData' ? 0 : 90,\n//               autoSkipPadding: 20,\n//             },\n//             grid: {\n//               display: true,\n//               drawTicks: false,\n//               tickLength: 100,\n//               lineWidth: 1\n//             },\n//           },\n//           y: {\n//             beginAtZero: true,\n//             ticks: {\n//               precision: 0,\n//             },\n//           },\n//         },\n//     plugins: {\n//       legend: {\n//         display: true,\n//         position: \"top\",\n//       },\n//       tooltip: {\n//         enabled: true,\n//       },\n//     },\n//   });\n//   const applyFilter = (data: ChartData | null) => {\n//     if (!data) return data;\n//     const filteredLabels = selectedLabels.length\n//       ? data.labels.filter(label => selectedLabels.includes(label))\n//       : data.labels;\n//     const filteredData = data.datasets.map(dataset => ({\n//       ...dataset,\n//       data: filteredLabels.map(label => dataset.data[data.labels.indexOf(label)])\n//     }));\n//     return {\n//       labels: filteredLabels,\n//       datasets: filteredData,\n//     };\n//   };\n//   const handleCheckboxChange = (label: string) => {\n//     setSelectedLabels(prev =>\n//       prev.includes(label)\n//         ? prev.filter(item => item !== label)\n//         : [...prev, label]\n//     );\n//   };\n//   const handleSelectAll = () => {\n//     if (selectedChart && chartData[selectedChart]) {\n//       setSelectedLabels(chartData[selectedChart]?.labels || []);\n//     }\n//   };\n//   const handleClearAll = () => {\n//     setSelectedLabels([]);\n//   };\n//   const renderChart = (type: string, ChartComponent: any) => {\n//     const data = applyFilter(chartData[type]);\n//     if (!loading && data) {\n//       return (\n//         <div className=\"card p-4 border rounded shadow-sm\">\n//           <div style={{ width: \"100%\", overflowX: \"auto\" }}>\n//             <div\n//               style={{\n//                 minWidth: [\"lineChartData\", \"barChartData\"].includes(type)\n//                   ? `${chartWidth}px`\n//                   : \"auto\",\n//                 height: \"400px\",\n//               }}\n//             >\n//               <ChartComponent data={data} options={getChartOptions(type)} />\n//             </div>\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n//   return (\n//     <div className=\"flex flex-col md:flex-row h-screen border border-black\">\n//       <div className=\"w-full md:w-1/4 bg-white p-5 border-t md:border-l md:border-black\">\n//         <h2 className=\"text-lg font-bold mb-2\">Upload File</h2>\n//         <input type=\"file\" onChange={handleFileChange} className=\"border p-2 w-full\" />\n//         <button\n//           onClick={handleSubmit}\n//           className=\"bg-blue-500 text-white p-2 rounded flex items-center justify-center mt-4\"\n//         >\n//           <BsUpload className=\"mr-2\" /> Submit\n//         </button>\n//         {selectedChart && (\n//           <div className=\"mt-4\">\n//             <h3 className=\"font-semibold\">Filters</h3>\n//             <button onClick={handleSelectAll} className=\"bg-green-500 text-white px-2 py-1 rounded mt-2\">Select All</button>\n//             <button onClick={handleClearAll} className=\"bg-red-500 text-white px-2 py-1 rounded mt-2 ml-2\">Clear All</button>\n//             {chartData[selectedChart]?.labels.map(label => (\n//               <div key={label} className=\"flex items-center\">\n//                 <input\n//                   type=\"checkbox\"\n//                   checked={selectedLabels.includes(label)}\n//                   onChange={() => handleCheckboxChange(label)}\n//                 />\n//                 <label className=\"ml-2\">{label}</label>\n//               </div>\n//             ))}\n//           </div>\n//         )}\n//         <div className=\"flex flex-col space-y-2 mt-4\">\n//           {[\"lineChartData\", \"barChartData\", \"scatterChartData\", \"pieChartData\", \"donutChartData\"].map(\n//             (type) => (\n//               <button\n//                 key={type}\n//                 onClick={() => {\n//                   setSelectedChart(type);\n//                   setSelectedLabels([]);\n//                 }}\n//                 className=\"p-2 bg-gray-300 rounded hover:bg-gray-400\"\n//               >\n//                 {type.replace(\"ChartData\", \" Chart\")}\n//               </button>\n//             )\n//           )}\n//         </div>\n//       </div>\n//       <div className=\"w-full md:w-3/4 bg-gray-100 p-5 overflow-auto\">\n//         {loading ? (\n//           <div className=\"flex justify-center items-center h-full\">\n//             <div className=\"spinner-border animate-spin border-t-4 border-blue-500 rounded-full w-12 h-12\"></div>\n//           </div>\n//         ) : (\n//           renderChart(selectedChart, {\n//             lineChartData: Line,\n//             barChartData: Bar,\n//             scatterChartData: Scatter,\n//             pieChartData: Pie,\n//             donutChartData: Doughnut,\n//           }[selectedChart])\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n// \"use client\";\n// import { useState, useEffect } from \"react\";\n// import { Bar, Line, Doughnut, Pie, Scatter } from \"react-chartjs-2\";\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   LineElement,\n//   PointElement,\n//   ArcElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n// } from \"chart.js\";\n// import { BsUpload } from \"react-icons/bs\";\n// import zoomPlugin from \"chartjs-plugin-zoom\";\n// import { log } from \"node:console\";\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   LineElement,\n//   PointElement,\n//   ArcElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n//   zoomPlugin\n// );\n// interface ChartData {\n//   labels: string[];\n//   datasets: {\n//     label: string;\n//     data: number[];\n//     backgroundColor?: string;\n//     borderColor?: string;\n//     fill?: boolean;\n//   }[];\n// }\n// export default function Dashboard() {\n//   const [chartData, setChartData] = useState<Record<string, ChartData | null>>({\n//     scatterChartData: null,\n//     pieChartData: null,\n//     donutChartData: null,\n//     lineChartData: null,\n//     barChartData: null,\n//   });\n//   const [selectedFile, setSelectedFile] = useState<File | null>(null);\n//   const [selectedChart, setSelectedChart] = useState<string>(\"lineChartData\");\n//   const [loading, setLoading] = useState<boolean>(false);\n//   const [chartWidth, setChartWidth] = useState<number>(0);\n//   const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setSelectedFile(event.target.files?.[0] || null);\n//   };\n//   const handleSubmit = async () => {\n//     if (!selectedFile) return;\n//     setLoading(true);\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n//     try {\n//       const response = await fetch(\"http://localhost:3012/api/analyze-excel\", {\n//         method: \"POST\",\n//         body: formData,\n//       });\n//       if (!response.ok) throw new Error(\"Error uploading file.\");\n//       const result = await response.json();\n//       const processedData = result.data?.processedData;\n// console.log(\"processedData\",processedData);\n//       if (!processedData) throw new Error(\"Invalid response structure.\");\n//       const generateChartData = (chartType: string): ChartData | null => {\n//         const chartInfo = processedData[chartType]?.[0];\n//         if (!chartInfo) return null;\n//         const labels = Object.keys(chartInfo.data);\n//         const values = Object.values(chartInfo.data);\n//  console.log(\"labels.length \",chartType,labels.length );\n//  console.log(\"values.length \",chartType,values.length );\n//         setChartWidth(labels.length * 150);\n//         return {\n//           labels,\n//           datasets: [\n//             {\n//               label: chartInfo.label || chartType,\n//               data: values as number[],\n//               backgroundColor: chartType.includes(\"Bar\")\n//                 ? \"rgba(54, 162, 235, 0.5)\"\n//                 : \"rgba(255, 99, 132, 0.5)\",\n//               borderColor: chartType.includes(\"Line\")\n//                 ? \"rgba(255, 99, 132, 1)\"\n//                 : undefined,\n//               fill: !chartType.includes(\"Line\"),\n//             },\n//           ],\n//         };\n//       };\n// console.log(\"generateChartData\",generateChartData);\n//       setChartData({\n//         scatterChartData: generateChartData(\"Scatter Plot\"),\n//         pieChartData: generateChartData(\"Pie Chart\"),\n//         donutChartData: generateChartData(\"Donut Chart\"),\n//         lineChartData: generateChartData(\"Line Chart\"),\n//         barChartData: generateChartData(\"Bar Chart\"),\n//       });\n//     } catch (error) {\n//       console.error(\"Error uploading file:\", error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const getChartOptions = (type: string) => ({\n//     responsive: true,\n//     maintainAspectRatio: false,\n//     scales: [\"pieChartData\", \"donutChartData\"].includes(type)\n//       ? {}\n//       : {\n//         x: {\n//           ticks: {\n//             autoSkip: false,\n//             maxRotation: type === 'barChartData' || type === 'scatterChartData' ? 20 : 100,\n//         minRotation: type === 'barChartData' || type === 'scatterChartData' ? 0 : 90,\n//             autoSkipPadding: 20,\n//           },\n//           grid: {\n//             display: true,\n//             drawTicks: false,\n//             tickLength: 100,\n//             lineWidth: 1\n//           },\n//         },\n//           y: {\n//             beginAtZero: true,\n//             ticks: {\n//               precision: 0,\n//             },\n//           },\n//         },\n//     plugins: {\n//       legend: {\n//         display: true,\n//         position: \"top\",\n//       },\n//       tooltip: {\n//         enabled: true,\n//       },\n//     },\n//   });\n//   const renderChart = (type: string, ChartComponent: any) => {\n//     const data = chartData[type];\n//     if (!loading && data) {\n//       return (\n//         <div className=\"card p-4 border rounded shadow-sm\">\n//           <div style={{ width: \"100%\", overflowX: \"auto\" }}>\n//             <div\n//               style={{\n//                 minWidth: [\"lineChartData\", \"barChartData\"].includes(type)\n//                   ? `${chartWidth}px`\n//                   : \"auto\",\n//                 height: \"400px\",\n//               }}\n//             >\n//               <ChartComponent data={data} options={getChartOptions(type)} />\n//             </div>\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n//   return (\n//     <div className=\"flex flex-col md:flex-row h-screen border border-black\">\n//       <div className=\"w-full md:w-1/4 bg-white p-5 border-t md:border-l md:border-black\">\n//         <h2 className=\"text-lg font-bold mb-2\">Upload File</h2>\n//         <input type=\"file\" onChange={handleFileChange} className=\"border p-2 w-full\" />\n//         <button\n//           onClick={handleSubmit}\n//           className=\"bg-blue-500 text-white p-2 rounded flex items-center justify-center mt-4\"\n//         >\n//           <BsUpload className=\"mr-2\" /> Submit\n//         </button>\n//         <div className=\"flex flex-col space-y-2 mt-4\">\n//           {[\"lineChartData\", \"barChartData\", \"scatterChartData\", \"pieChartData\", \"donutChartData\"].map(\n//             (type) => (\n//               <button\n//                 key={type}\n//                 onClick={() => setSelectedChart(type)}\n//                 className=\"p-2 bg-gray-300 rounded hover:bg-gray-400\"\n//               >\n//                 {type.replace(\"ChartData\", \" Chart\")}\n//               </button>\n//             )\n//           )}\n//         </div>\n//       </div>\n//       <div className=\"w-full md:w-3/4 bg-gray-100 p-5 overflow-auto\">\n//         {loading ? (\n//           <div className=\"flex justify-center items-center h-full\">\n//             <div className=\"spinner-border animate-spin border-t-4 border-blue-500 rounded-full w-12 h-12\"></div>\n//           </div>\n//         ) : (\n//           renderChart(selectedChart, {\n//             lineChartData: Line,\n//             barChartData: Bar,\n//             scatterChartData: Scatter,\n//             pieChartData: Pie,\n//             donutChartData: Doughnut,\n//           }[selectedChart])\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n// \"use client\";\n// import { useState, useEffect } from \"react\";\n// import { Bar, Line, Doughnut, Pie, Scatter } from \"react-chartjs-2\";\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   LineElement,\n//   PointElement,\n//   ArcElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n// } from \"chart.js\";\n// import { BsUpload } from \"react-icons/bs\";\n// import zoomPlugin from \"chartjs-plugin-zoom\";\n// import { log } from \"node:console\";\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   LineElement,\n//   PointElement,\n//   ArcElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n//   zoomPlugin\n// );\n// interface ChartData {\n//   labels: string[];\n//   datasets: {\n//     label: string;\n//     data: number[];\n//     backgroundColor?: string | string[];\n//     borderColor?: string;\n//     fill?: boolean;\n//   }[];\n// }\n// export default function Dashboard() {\n//   const [chartData, setChartData] = useState<Record<string, ChartData | null>>({\n//     scatterChartData: null,\n//     pieChartData: null,\n//     donutChartData: null,\n//     lineChartData: null,\n//     barChartData: null,\n//   });\n//   const [selectedFile, setSelectedFile] = useState<File | null>(null);\n//   const [selectedChart, setSelectedChart] = useState<string>(\"lineChartData\");\n//   const [loading, setLoading] = useState<boolean>(false);\n//   const [chartWidth, setChartWidth] = useState<number>(0);\n//   const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setSelectedFile(event.target.files?.[0] || null);\n//   };\n//   const handleSubmit = async () => {\n//     if (!selectedFile) return;\n//     setLoading(true);\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n//     try {\n//       const response = await fetch(\"http://localhost:3012/api/analyze-excel\", {\n//         method: \"POST\",\n//         body: formData,\n//       });\n//       if (!response.ok) throw new Error(\"Error uploading file.\");\n//       const result = await response.json();\n//       const processedData = result.data?.processedData;\n//       if (!processedData) throw new Error(\"Invalid response structure.\");\n//       const lightColors = [\n//         \"rgba(173, 216, 230, 0.6)\",\n//         \"rgba(144, 238, 144, 0.6)\",\n//         \"rgba(255, 182, 193, 0.6)\",\n//         \"rgba(255, 228, 181, 0.6)\",\n//         \"rgba(221, 160, 221, 0.6)\",\n//         \"rgba(240, 230, 140, 0.6)\",\n//       ];\n//       const generateChartData = (chartType: string): ChartData | null => {\n//         const chartInfo = processedData[chartType]?.[0];\n//         if (!chartInfo) return null;\n//         const labels = Object.keys(chartInfo.data);\n//         const values = Object.values(chartInfo.data);\n//         setChartWidth(labels.length * 150);\n//         return {\n//           labels,\n//           datasets: [\n//             {\n//               label: chartInfo.label || chartType,\n//               data: values as number[],\n//               backgroundColor: [\"Pie Chart\", \"Donut Chart\", \"Bar Chart\"].includes(chartType)\n//                 ? lightColors.slice(0, labels.length)\n//                 : \"rgba(135, 206, 250, 0.6)\",\n//               borderColor: chartType.includes(\"Line\")\n//                 ? \"rgba(135, 206, 250, 1)\"\n//                 : undefined,\n//               fill: !chartType.includes(\"Line\"),\n//             },\n//           ],\n//         };\n//       };\n//       setChartData({\n//         scatterChartData: generateChartData(\"Scatter Plot\"),\n//         pieChartData: generateChartData(\"Pie Chart\"),\n//         donutChartData: generateChartData(\"Donut Chart\"),\n//         lineChartData: generateChartData(\"Line Chart\"),\n//         barChartData: generateChartData(\"Bar Chart\"),\n//       });\n//     } catch (error) {\n//       console.error(\"Error uploading file:\", error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const getChartOptions = (type: string) => ({\n//     responsive: true,\n//     maintainAspectRatio: false,\n//     scales: [\"pieChartData\", \"donutChartData\"].includes(type)\n//       ? {}\n//       : {\n// x: {\n//   ticks: {\n//     autoSkip: false,\n//     maxRotation: type === 'barChartData' || type === 'scatterChartData' ? 20 : 100,\n// minRotation: type === 'barChartData' || type === 'scatterChartData' ? 0 : 90,\n//     autoSkipPadding: 20,\n//   },\n//   grid: {\n//     display: true,\n//     drawTicks: false,\n//     tickLength: 100,\n//     lineWidth: 1\n//   },\n// },\n//           y: {\n//             beginAtZero: true,\n//             ticks: {\n//               precision: 0,\n//             },\n//           },\n//         },\n//     plugins: {\n//       legend: {\n//         display: true,\n//         position: \"top\",\n//       },\n//       tooltip: {\n//         enabled: true,\n//       },\n//     },\n//   });\n//   const renderChart = (type: string, ChartComponent: any) => {\n//     const data = chartData[type];\n//     if (!loading && data) {\n//       return (\n//         <div className=\"card p-4 border rounded shadow-sm\">\n//           <div style={{ width: \"100%\", overflowX: \"auto\" }}>\n//             <div\n//               style={{\n//                 minWidth: [\"lineChartData\", \"barChartData\"].includes(type)\n//                   ? `${chartWidth}px`\n//                   : \"auto\",\n//                 height: \"400px\",\n//               }}\n//             >\n//               <ChartComponent data={data} options={getChartOptions(type)} />\n//             </div>\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n//   return (\n//     <div className=\"flex flex-col md:flex-row h-screen border border-black\">\n//       <div className=\"w-full md:w-1/4 bg-white p-5 border-t md:border-l md:border-black\">\n//         <h2 className=\"text-lg font-bold mb-2\">Upload File</h2>\n//         <input type=\"file\" onChange={handleFileChange} className=\"border p-2 w-full\" />\n//         <button\n//           onClick={handleSubmit}\n//           className=\"bg-blue-500 text-white p-2 rounded flex items-center justify-center mt-4\"\n//         >\n//           <BsUpload className=\"mr-2\" /> Submit\n//         </button>\n//         <div className=\"flex flex-col space-y-2 mt-4\">\n//           {[\"lineChartData\", \"barChartData\", \"scatterChartData\", \"pieChartData\", \"donutChartData\"].map(\n//             (type) => (\n//               <button\n//                 key={type}\n//                 onClick={() => setSelectedChart(type)}\n//                 className=\"p-2 bg-gray-300 rounded hover:bg-gray-400\"\n//               >\n//                 {type.replace(\"ChartData\", \" Chart\")}\n//               </button>\n//             )\n//           )}\n//         </div>\n//       </div>\n//       <div className=\"w-full md:w-3/4 bg-gray-100 p-5 overflow-auto\">\n//         {loading ? (\n//           <div className=\"flex justify-center items-center h-full\">\n//             <div className=\"spinner-border animate-spin border-t-4 border-blue-500 rounded-full w-12 h-12\"></div>\n//           </div>\n//         ) : (\n//           renderChart(selectedChart, {\n//             lineChartData: Line,\n//             barChartData: Bar,\n//             scatterChartData: Scatter,\n//             pieChartData: Pie,\n//             donutChartData: Doughnut,\n//           }[selectedChart])\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n// \"use client\";\n// import { useState, useEffect } from \"react\";\n// import { Bar, Line, Doughnut, Pie, Scatter } from \"react-chartjs-2\";\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   LineElement,\n//   PointElement,\n//   ArcElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n// } from \"chart.js\";\n// import { BsUpload } from \"react-icons/bs\";\n// import zoomPlugin from \"chartjs-plugin-zoom\";\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   LineElement,\n//   PointElement,\n//   ArcElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n//   zoomPlugin\n// );\n// interface ChartData {\n//   labels: string[];\n//   datasets: {\n//     label: string;\n//     data: number[];\n//     backgroundColor?: string | string[];\n//     borderColor?: string;\n//     fill?: boolean;\n//   }[];\n// }\n// export default function Dashboard() {\n//   const [chartData, setChartData] = useState<Record<string, ChartData | null>>({\n//     scatterChartData: null,\n//     pieChartData: null,\n//     donutChartData: null,\n//     lineChartData: null,\n//     barChartData: null,\n//   });\n//   const [selectedFile, setSelectedFile] = useState<File | null>(null);\n//   const [selectedChart, setSelectedChart] = useState<string>(\"lineChartData\");\n//   const [loading, setLoading] = useState<boolean>(false);\n//   const [chartWidth, setChartWidth] = useState<number>(0);\n//   const [inputValue, setInputValue] = useState<string>(\"\");\n//   const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setSelectedFile(event.target.files?.[0] || null);\n//   };\n//   const handleSubmit = async () => {\n//     if (!selectedFile) return;\n//     setLoading(true);\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n//     try {\n//       const response = await fetch(\"http://localhost:3012/api/analyze-excel\", {\n//         method: \"POST\",\n//         body: formData,\n//       });\n//       if (!response.ok) throw new Error(\"Error uploading file.\");\n//       const result = await response.json();\n//       const processedData = result.data?.processedData;\n//       if (!processedData) throw new Error(\"Invalid response structure.\");\n//       const lightColors = [\n//         \"rgba(173, 216, 230, 0.6)\",\n//         \"rgba(144, 238, 144, 0.6)\",\n//         \"rgba(255, 182, 193, 0.6)\",\n//         \"rgba(255, 228, 181, 0.6)\",\n//         \"rgba(221, 160, 221, 0.6)\",\n//         \"rgba(240, 230, 140, 0.6)\",\n//       ];\n//       const generateChartData = (chartType: string): ChartData | null => {\n//         const chartInfo = processedData[chartType]?.[0];\n//         if (!chartInfo) return null;\n//         const labels = Object.keys(chartInfo.data);\n//         const values = Object.values(chartInfo.data);\n//         setChartWidth(labels.length * 150);\n//         return {\n//           labels,\n//           datasets: [\n//             {\n//               label: chartInfo.label || chartType,\n//               data: values as number[],\n//               backgroundColor: [\"Pie Chart\", \"Donut Chart\", \"Bar Chart\"].includes(chartType)\n//                 ? lightColors.slice(0, labels.length)\n//                 : \"rgba(135, 206, 250, 0.6)\",\n//               borderColor: chartType.includes(\"Line\")\n//                 ? \"rgba(135, 206, 250, 1)\"\n//                 : undefined,\n//               fill: !chartType.includes(\"Line\"),\n//             },\n//           ],\n//         };\n//       };\n//       setChartData({\n//         scatterChartData: generateChartData(\"Scatter Plot\"),\n//         pieChartData: generateChartData(\"Pie Chart\"),\n//         donutChartData: generateChartData(\"Donut Chart\"),\n//         lineChartData: generateChartData(\"Line Chart\"),\n//         barChartData: generateChartData(\"Bar Chart\"),\n//       });\n//     } catch (error) {\n//       console.error(\"Error uploading file:\", error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleSend = () => {\n//     console.log(\"Input Value:\", inputValue);\n//   };\n//   const getChartOptions = (type: string) => ({\n//     responsive: true,\n//     maintainAspectRatio: false,\n//     scales: [\"pieChartData\", \"donutChartData\"].includes(type)\n//       ? {}\n//       : {\n//         x: {\n//           ticks: {\n//             autoSkip: false,\n//             maxRotation: type === 'barChartData' || type === 'scatterChartData' ? 20 : 100,\n//         minRotation: type === 'barChartData' || type === 'scatterChartData' ? 0 : 90,\n//             autoSkipPadding: 20,\n//           },\n//           grid: {\n//             display: true,\n//             drawTicks: false,\n//             tickLength: 100,\n//             lineWidth: 1\n//           },\n//         },\n//           y: {\n//             beginAtZero: true,\n//             ticks: {\n//               precision: 0,\n//             },\n//           },\n//         },\n//     plugins: {\n//       legend: {\n//         display: true,\n//         position: \"top\",\n//       },\n//       tooltip: {\n//         enabled: true,\n//       },\n//     },\n//   });\n//   const renderChart = (type: string, ChartComponent: any) => {\n//     const data = chartData[type];\n//     if (!loading && data) {\n//       return (\n//         <div className=\"card p-4 border rounded shadow-sm\">\n//           <div style={{ width: \"100%\", overflowX: \"auto\" }}>\n//             <div\n//               style={{\n//                 minWidth: [\"lineChartData\", \"barChartData\"].includes(type)\n//                   ? `${chartWidth}px`\n//                   : \"auto\",\n//                 height: \"400px\",\n//               }}\n//             >\n//               <ChartComponent data={data} options={getChartOptions(type)} />\n//             </div>\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n//   return (\n//     <div className=\"flex flex-col md:flex-row h-screen border border-black\">\n//       <div className=\"w-full md:w-1/4 bg-white p-5 border-t md:border-l md:border-black\">\n//         <h2 className=\"text-lg font-bold mb-2\">Upload File</h2>\n//         <input type=\"file\" onChange={handleFileChange} className=\"border p-2 w-full\" />\n//         <button\n//           onClick={handleSubmit}\n//           className=\"bg-blue-500 text-white p-2 rounded flex items-center justify-center mt-4\"\n//         >\n//           <BsUpload className=\"mr-2\" /> Submit\n//         </button>\n//         <div className=\"flex flex-col space-y-2 mt-4\">\n//           {[\"lineChartData\", \"barChartData\", \"scatterChartData\", \"pieChartData\", \"donutChartData\"].map(\n//             (type) => (\n//               <button\n//                 key={type}\n//                 onClick={() => setSelectedChart(type)}\n//                 className=\"p-2 bg-gray-300 rounded hover:bg-gray-400\"\n//               >\n//                 {type.replace(\"ChartData\", \" Chart\")}\n//               </button>\n//             )\n//           )}\n//         </div>\n//       </div>\n//       <div className=\"w-full md:w-3/4 bg-gray-100 p-5 overflow-auto\">\n//         {loading ? (\n//           <div className=\"flex justify-center items-center h-full\">\n//             <div className=\"spinner-border animate-spin border-t-4 border-blue-500 rounded-full w-12 h-12\"></div>\n//           </div>\n//         ) : (\n//           renderChart(selectedChart, {\n//             lineChartData: Line,\n//             barChartData: Bar,\n//             scatterChartData: Scatter,\n//             pieChartData: Pie,\n//             donutChartData: Doughnut,\n//           }[selectedChart])\n//         )}\n//         <div className=\"mt-4 flex\">\n//           <input\n//             type=\"text\"\n//             value={inputValue}\n//             onChange={(e) => setInputValue(e.target.value)}\n//             className=\"border p-2 flex-grow mr-2 rounded\"\n//             placeholder=\"Enter your text here\"\n//           />\n//           <button\n//             onClick={handleSend}\n//             className=\"bg-green-500 text-white p-2 rounded\"\n//           >\n//             Send\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// \"use client\";\n// import { useState, useEffect } from \"react\";\n// import { Bar, Line, Doughnut, Pie, Scatter } from \"react-chartjs-2\";\n// import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, LineElement, PointElement, ArcElement, Title, Tooltip, Legend } from \"chart.js\";\n// import { BsUpload } from \"react-icons/bs\";\n// import zoomPlugin from \"chartjs-plugin-zoom\";\n// ChartJS.register(CategoryScale, LinearScale, BarElement, LineElement, PointElement, ArcElement, Title, Tooltip, Legend, zoomPlugin);\n// interface ChartData {\n//   labels: string[];\n//   datasets: {\n//     label: string;\n//     data: number[];\n//     backgroundColor?: string | string[];\n//     borderColor?: string;\n//     fill?: boolean;\n//   }[]\n//   meta?: {\n//     header: string;\n//     valueName: string;\n//   };\n// }\n// export default function Dashboard() {\n//   const [chartData, setChartData] = useState<Record<string, ChartData | null>>({\n//     scatterChartData: null,\n//     pieChartData: null,\n//     donutChartData: null,\n//     lineChartData: null,\n//     barChartData: null,\n//   });\n//   const [selectedFile, setSelectedFile] = useState<File | null>(null);\n//   const [selectedChart, setSelectedChart] = useState<string>(\"lineChartData\");\n//   const [loading, setLoading] = useState<boolean>(false);\n//   const [chartWidth, setChartWidth] = useState<number>(0);\n//   const [inputValue, setInputValue] = useState<string>(\"\");\n//   const [storedProcessedData, setStoredProcessedData] = useState<any>(null); // New state to store processed data\n//   const [combinedInsights, setCombinedInsights] = useState<any>(null);\n//   const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setSelectedFile(event.target.files?.[0] || null);\n//   };\n//   const handleSubmit = async () => {\n//     if (!selectedFile) return;\n//     setLoading(true);\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n//     try {\n//       const response = await fetch(\"http://localhost:3012/api/analyze-excel\", {\n//         method: \"POST\",\n//         body: formData,\n//       });\n//       if (!response.ok) throw new Error(\"Error uploading file.\");\n//       const result = await response.json();\n//       const combinedInsights = result.data?.combinedInsights;\n//       const processedData = result.data?.processedData;\n//       if (!processedData) throw new Error(\"Invalid response structure.\");\n// console.log(\"processedData\",processedData);\n//       setStoredProcessedData(processedData); // Store the processed data\n//       setCombinedInsights(combinedInsights);\n//       const lightColors = [\n//         \"rgba(173, 216, 230, 0.6)\",\n//         \"rgba(144, 238, 144, 0.6)\",\n//         \"rgba(255, 182, 193, 0.6)\",\n//         \"rgba(255, 228, 181, 0.6)\",\n//         \"rgba(221, 160, 221, 0.6)\",\n//         \"rgba(240, 230, 140, 0.6)\",\n//       ];\n//       const generateChartData = (chartType: string): ChartData | null => {\n//         const chartInfo = processedData[chartType]?.[0];\n//         if (!chartInfo) return null;\n//         const labels = Object.keys(chartInfo.data);\n//         const values = Object.values(chartInfo.data);\n//         setChartWidth(labels.length * 150);\n//         return {\n//           labels,\n//           datasets: [\n//             {\n//               label: chartInfo.label || chartType,\n//               data: values as number[],\n//               backgroundColor: [\"Pie Chart\", \"Donut Chart\", \"Bar Chart\"].includes(chartType)\n//                 ? lightColors.slice(0, labels.length)\n//                 : \"rgba(135, 206, 250, 0.6)\",\n//               borderColor: chartType.includes(\"Line\") ? \"rgba(135, 206, 250, 1)\" : undefined,\n//               fill: !chartType.includes(\"Line\"),\n//             },\n//           ],\n//           meta: {\n//             header: chartInfo.header || \"default_header\",\n//             valueName: chartInfo.valueName || \"default_valueName\",\n//           },\n//         };\n//       };\n//       setChartData({\n//         scatterChartData: generateChartData(\"Scatter Plot\"),\n//         pieChartData: generateChartData(\"Pie Chart\"),\n//         donutChartData: generateChartData(\"Donut Chart\"),\n//         lineChartData: generateChartData(\"Line Chart\"),\n//         barChartData: generateChartData(\"Bar Chart\"),\n//       });\n//     } catch (error) {\n//       console.error(\"Error uploading file:\", error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleSend = async () => {\n//     if (!inputValue) return;\n//     const graphData = chartData[selectedChart];\n//     if (!graphData) return;\n//     const labels = graphData.labels;\n//     const values = graphData.datasets[0].data;\n//     const dataObject = labels.reduce((obj: { [key: string]: number }, label, index) => {\n//       obj[label] = values[index];\n//       return obj;\n//     }, {});\n//     const chartTypeMapping: Record<string, string> = {\n//       lineChartData: \"Line Chart\",\n//       pieChartData: \"Pie Chart\",\n//       donutChartData: \"Donut Chart\",\n//       barChartData: \"Bar Chart\",\n//       scatterChartData: \"Scatter Plot\",\n//     };\n//     const selectedChartType = chartTypeMapping[selectedChart] || selectedChart;\n//     // Filter the stored processed data to include only the selected chart's data\n//     const filteredProcessedData = {\n//       [selectedChartType]: storedProcessedData[selectedChartType],\n//     };\n//     console.log(\"...filteredProcessedData,\", filteredProcessedData[selectedChartType]?.[0]?.data);\n//     console.log(\"dataObject,\", dataObject);\n//     const requestBody = {\n//       question: inputValue,\n//       processedData: {\n//         // Include the stored processed data\n//         [selectedChartType]: [\n//           {\n//             header: graphData.meta?.header || \"default_header\",\n//             valueName: graphData.meta?.valueName || \"default_valueName\",\n//             label: graphData.datasets[0].label,\n//             data: filteredProcessedData[selectedChartType]?.[0]?.data,\n//           },\n//         ],\n//       },\n//     };\n//     try {\n//       const response = await fetch(\n//         `http://localhost:3012/api/answer-analyze-excel?question=${encodeURIComponent(inputValue)}`,\n//         {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(requestBody),\n//         }\n//       );\n//       if (!response.ok) throw new Error(\"Error uploading file.\");\n//       const result = await response.json();\n//       const processedData = result.data?.processedData;\n//       if (!processedData) throw new Error(\"Invalid response structure.\");\n//       console.log(\"Updated API Response Data:\", processedData);\n//       const generateChartData = (chartType: string): ChartData | null => {\n//         const chartInfo = processedData[chartType]?.[0]; // Use only API response data\n//         if (!chartInfo) return null;\n//         const labels = Object.keys(chartInfo.data);\n//         const values = Object.values(chartInfo.data);\n//         setChartWidth(labels.length * 150);\n//         return {\n//           labels,\n//           datasets: [\n//             {\n//               label: chartInfo.label || chartType,\n//               data: values as number[],\n//               backgroundColor: [\"Pie Chart\", \"Donut Chart\", \"Bar Chart\"].includes(chartType)\n//                 ? [\"rgba(173, 216, 230, 0.6)\", \"rgba(144, 238, 144, 0.6)\", \"rgba(255, 182, 193, 0.6)\"]\n//                 : \"rgba(135, 206, 250, 0.6)\",\n//               borderColor: chartType.includes(\"Line\") ? \"rgba(135, 206, 250, 1)\" : undefined,\n//               fill: !chartType.includes(\"Line\"),\n//             },\n//           ],\n//           meta: {\n//             header: chartInfo.header || \"default_header\",\n//             valueName: chartInfo.valueName || \"default_valueName\",\n//           },\n//         };\n//       };\n//       // Only update chartData without storing in storedProcessedData\n//       setChartData((prevChartData) => ({\n//         ...prevChartData,\n//         [selectedChart]: generateChartData(selectedChartType),\n//       }));\n//     } catch (error) {\n//       console.error(\"Error sending request:\", error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const getChartOptions = (type: string) => ({\n//     responsive: true,\n//     maintainAspectRatio: false,\n//     scales: [\"pieChartData\", \"donutChartData\"].includes(type)\n//       ? {}\n//       : {\n//         x: {\n//           ticks: {\n//             autoSkip: false,\n//             maxRotation: type === 'barChartData' || type === 'scatterChartData' ? 20 : 100,\n//         minRotation: type === 'barChartData' || type === 'scatterChartData' ? 0 : 90,\n//             autoSkipPadding: 20,\n//           },\n//           grid: {\n//             display: true,\n//             drawTicks: false,\n//             tickLength: 100,\n//             lineWidth: 1\n//           },\n//         },\n//         y: {\n//           beginAtZero: true,\n//           ticks: { precision: 0 },\n//         },\n//       },\n//     plugins: {\n//       legend: { display: true, position: \"top\" },\n//       tooltip: { enabled: true },\n//     },\n//   });\n//   const renderChart = (type: string, ChartComponent: any) => {\n//     const data = chartData[type];\n//     if (!loading && data) {\n//       return (\n//         <div className=\"card p-4 border rounded shadow-sm\">\n//           <div style={{ width: \"100%\", overflowX: \"auto\" }}>\n//             <div style={{ minWidth: [\"lineChartData\", \"barChartData\"].includes(type) ? `${chartWidth}px` : \"auto\", height: \"400px\" }}>\n//               <ChartComponent data={data} options={getChartOptions(type)} />\n//             </div>\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n//   return (\n//     <div className=\"flex flex-col md:flex-row h-screen border border-black\">\n//       <div className=\"w-full md:w-1/4 bg-white p-5 border-t md:border-l md:border-black\">\n//         <h2 className=\"text-lg font-bold mb-2\">Upload File</h2>\n//         <input type=\"file\" onChange={handleFileChange} className=\"border p-2 w-full\" />\n//         <button onClick={handleSubmit} className=\"bg-blue-500 text-white p-2 rounded flex items-center justify-center mt-4\">\n//           <BsUpload className=\"mr-2\" /> Submit\n//         </button>\n//         <div className=\"flex flex-col space-y-2 mt-4\">\n//           {[\"lineChartData\", \"barChartData\", \"scatterChartData\", \"pieChartData\", \"donutChartData\"].map((type) => (\n//             <button key={type} onClick={() => setSelectedChart(type)} className=\"p-2 bg-gray-300 rounded hover:bg-gray-400\">\n//               {type.replace(\"ChartData\", \" Chart\")}\n//             </button>\n//           ))}\n//         </div>\n//       </div>\n//       <div className=\"w-full md:w-3/4 bg-gray-100 p-5 overflow-auto\">\n//         {loading ? (\n//           <div className=\"flex justify-center items-center h-full\">\n//             <div className=\"spinner-border animate-spin border-t-4 border-blue-500 rounded-full w-12 h-12\"></div>\n//           </div>\n//         ) : (\n//           selectedChart && renderChart(selectedChart, { lineChartData: Line, barChartData: Bar, scatterChartData: Scatter, pieChartData: Pie, donutChartData: Doughnut }[selectedChart])\n//         )}\n//         <div className=\"mt-4 flex\">\n//           <input\n//             type=\"text\"\n//             value={inputValue}\n//             onChange={(e) => setInputValue(e.target.value)}\n//             className=\"border p-2 flex-grow mr-2 rounded\"\n//             placeholder=\"Enter your text here\"\n//           />\n//           <button onClick={handleSend} className=\"bg-green-500 text-white p-2 rounded\">\n//             Send\n//           </button>\n//         </div>\n//         <div className=\"mt-4 p-4 border border-gray-300 rounded bg-white\">\n//         <h3 className=\"text-lg font-bold mb-2\">Insights</h3>\n//         {combinedInsights ? (\n//             <ol className=\"list-decimal list-inside text-sm text-gray-700 bg-gray-100 p-2 rounded overflow-auto\">\n//             {combinedInsights.split('\\n').map((insight, index) => (\n//               <ul key={index}>{insight}</ul>\n//             ))}\n//           </ol>\n//         ) : (\n//           <p className=\"text-gray-500\">No insights available.</p>\n//         )}\n//       </div>\n//       </div>\n//     </div>\n//   );\n// }\n// \"use client\";\n// import { useState, useEffect, useRef } from \"react\";\n// import { Bar, Line, Doughnut, Pie, Scatter } from \"react-chartjs-2\";\n// import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, LineElement, PointElement, ArcElement, Title, Tooltip, Legend } from \"chart.js\";\n// import { BsUpload } from \"react-icons/bs\";\n// import zoomPlugin from \"chartjs-plugin-zoom\";\n// import html2canvas from \"html2canvas\";\n// import jsPDF from \"jspdf\";\n// ChartJS.register(CategoryScale, LinearScale, BarElement, LineElement, PointElement, ArcElement, Title, Tooltip, Legend, zoomPlugin);\n// interface ChartData {\n//   labels: string[];\n//   datasets: {\n//     label: string;\n//     data: number[];\n//     backgroundColor?: string | string[];\n//     borderColor?: string;\n//     fill?: boolean;\n//   }[]\n//   meta?: {\n//     header: string;\n//     valueName: string;\n//   };\n// }\n// export default function Dashboard() {\n//   const [chartData, setChartData] = useState<Record<string, ChartData | null>>({\n//     scatterChartData: null,\n//     pieChartData: null,\n//     donutChartData: null,\n//     lineChartData: null,\n//     barChartData: null,\n//   });\n//   const [selectedFile, setSelectedFile] = useState<File | null>(null);\n//   const [selectedChart, setSelectedChart] = useState<string>(\"lineChartData\");\n//   const [loading, setLoading] = useState<boolean>(false);\n//   const [chartWidth, setChartWidth] = useState<number>(0);\n//   const [inputValue, setInputValue] = useState<string>(\"\");\n//   const [storedProcessedData, setStoredProcessedData] = useState<any>(null); // New state to store processed data\n//   const [combinedInsights, setCombinedInsights] = useState<any>(null);\n//   const chartRef = useRef<HTMLDivElement>(null); // Ref for the chart container\n//   const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setSelectedFile(event.target.files?.[0] || null);\n//   };\n//   const handleSubmit = async () => {\n//     if (!selectedFile) return;\n//     setLoading(true);\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n//     try {\n//       const response = await fetch(\"http://localhost:3012/api/analyze-excel\", {\n//         method: \"POST\",\n//         body: formData,\n//       });\n//       if (!response.ok) throw new Error(\"Error uploading file.\");\n//       const result = await response.json();\n//       const combinedInsights = result.data?.combinedInsights;\n//       const processedData = result.data?.processedData;\n//       if (!processedData) throw new Error(\"Invalid response structure.\");\n// console.log(\"processedData\",processedData);\n//       setStoredProcessedData(processedData); // Store the processed data\n//       setCombinedInsights(combinedInsights);\n//       const lightColors = [\n//         \"rgba(173, 216, 230, 0.6)\",\n//         \"rgba(144, 238, 144, 0.6)\",\n//         \"rgba(255, 182, 193, 0.6)\",\n//         \"rgba(255, 228, 181, 0.6)\",\n//         \"rgba(221, 160, 221, 0.6)\",\n//         \"rgba(240, 230, 140, 0.6)\",\n//       ];\n//       const generateChartData = (chartType: string): ChartData | null => {\n//         const chartInfo = processedData[chartType]?.[0];\n//         if (!chartInfo) return null;\n//         const labels = Object.keys(chartInfo.data);\n//         const values = Object.values(chartInfo.data);\n//         setChartWidth(labels.length * 150);\n//         return {\n//           labels,\n//           datasets: [\n//             {\n//               label: chartInfo.label || chartType,\n//               data: values as number[],\n//               backgroundColor: [\"Pie Chart\", \"Donut Chart\", \"Bar Chart\"].includes(chartType)\n//                 ? lightColors.slice(0, labels.length)\n//                 : \"rgba(135, 206, 250, 0.6)\",\n//               borderColor: chartType.includes(\"Line\") ? \"rgba(135, 206, 250, 1)\" : undefined,\n//               fill: !chartType.includes(\"Line\"),\n//             },\n//           ],\n//           meta: {\n//             header: chartInfo.header || \"default_header\",\n//             valueName: chartInfo.valueName || \"default_valueName\",\n//           },\n//         };\n//       };\n//       setChartData({\n//         scatterChartData: generateChartData(\"Scatter Plot\"),\n//         pieChartData: generateChartData(\"Pie Chart\"),\n//         donutChartData: generateChartData(\"Donut Chart\"),\n//         lineChartData: generateChartData(\"Line Chart\"),\n//         barChartData: generateChartData(\"Bar Chart\"),\n//       });\n//     } catch (error) {\n//       console.error(\"Error uploading file:\", error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleSend = async () => {\n//     if (!inputValue) return;\n//     const graphData = chartData[selectedChart];\n//     if (!graphData) return;\n//     const labels = graphData.labels;\n//     const values = graphData.datasets[0].data;\n//     const dataObject = labels.reduce((obj: { [key: string]: number }, label, index) => {\n//       obj[label] = values[index];\n//       return obj;\n//     }, {});\n//     const chartTypeMapping: Record<string, string> = {\n//       lineChartData: \"Line Chart\",\n//       pieChartData: \"Pie Chart\",\n//       donutChartData: \"Donut Chart\",\n//       barChartData: \"Bar Chart\",\n//       scatterChartData: \"Scatter Plot\",\n//     };\n//     const selectedChartType = chartTypeMapping[selectedChart] || selectedChart;\n//     // Filter the stored processed data to include only the selected chart's data\n//     const filteredProcessedData = {\n//       [selectedChartType]: storedProcessedData[selectedChartType],\n//     };\n//     console.log(\"...filteredProcessedData,\", filteredProcessedData[selectedChartType]?.[0]?.data);\n//     console.log(\"dataObject,\", dataObject);\n//     const requestBody = {\n//       question: inputValue,\n//       processedData: {\n//         // Include the stored processed data\n//         [selectedChartType]: [\n//           {\n//             header: graphData.meta?.header || \"default_header\",\n//             valueName: graphData.meta?.valueName || \"default_valueName\",\n//             label: graphData.datasets[0].label,\n//             data: filteredProcessedData[selectedChartType]?.[0]?.data,\n//           },\n//         ],\n//       },\n//     };\n//     try {\n//       const response = await fetch(\n//         `http://localhost:3012/api/answer-analyze-excel?question=${encodeURIComponent(inputValue)}`,\n//         {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(requestBody),\n//         }\n//       );\n//       if (!response.ok) throw new Error(\"Error uploading file.\");\n//       const result = await response.json();\n//       const processedData = result.data?.processedData;\n//       if (!processedData) throw new Error(\"Invalid response structure.\");\n//       console.log(\"Updated API Response Data:\", processedData);\n//       const generateChartData = (chartType: string): ChartData | null => {\n//         const chartInfo = processedData[chartType]?.[0]; // Use only API response data\n//         if (!chartInfo) return null;\n//         const labels = Object.keys(chartInfo.data);\n//         const values = Object.values(chartInfo.data);\n//         setChartWidth(labels.length * 150);\n//         return {\n//           labels,\n//           datasets: [\n//             {\n//               label: chartInfo.label || chartType,\n//               data: values as number[],\n//               backgroundColor: [\"Pie Chart\", \"Donut Chart\", \"Bar Chart\"].includes(chartType)\n//                 ? [\"rgba(173, 216, 230, 0.6)\", \"rgba(144, 238, 144, 0.6)\", \"rgba(255, 182, 193, 0.6)\"]\n//                 : \"rgba(135, 206, 250, 0.6)\",\n//               borderColor: chartType.includes(\"Line\") ? \"rgba(135, 206, 250, 1)\" : undefined,\n//               fill: !chartType.includes(\"Line\"),\n//             },\n//           ],\n//           meta: {\n//             header: chartInfo.header || \"default_header\",\n//             valueName: chartInfo.valueName || \"default_valueName\",\n//           },\n//         };\n//       };\n//       // Only update chartData without storing in storedProcessedData\n//       setChartData((prevChartData) => ({\n//         ...prevChartData,\n//         [selectedChart]: generateChartData(selectedChartType),\n//       }));\n//     } catch (error) {\n//       console.error(\"Error sending request:\", error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const getChartOptions = (type: string) => ({\n//     responsive: true,\n//     maintainAspectRatio: false,\n//     scales: [\"pieChartData\", \"donutChartData\"].includes(type)\n//       ? {}\n//       : {\n//         x: {\n//           ticks: {\n//             autoSkip: false,\n//             maxRotation: type === 'barChartData' || type === 'scatterChartData' ? 20 : 100,\n//         minRotation: type === 'barChartData' || type === 'scatterChartData' ? 0 : 90,\n//             autoSkipPadding: 20,\n//           },\n//           grid: {\n//             display: true,\n//             drawTicks: false,\n//             tickLength: 100,\n//             lineWidth: 1\n//           },\n//         },\n//         y: {\n//           beginAtZero: true,\n//           ticks: { precision: 0 },\n//         },\n//       },\n//     plugins: {\n//       legend: { display: true, position: \"top\" },\n//       tooltip: { enabled: true },\n//     },\n//   });\n//   const renderChart = (type: string, ChartComponent: any) => {\n//     const data = chartData[type];\n//     if (!loading && data) {\n//       return (\n//         <div className=\"card p-4 border rounded shadow-sm\">\n//           <div style={{ width: \"100%\", overflowX: \"auto\" }}>\n//             <div style={{ minWidth: [\"lineChartData\", \"barChartData\"].includes(type) ? `${chartWidth}px` : \"auto\", height: \"400px\" }}>\n//               <ChartComponent data={data} options={getChartOptions(type)} />\n//             </div>\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n//   const handleDownloadPDF = async () => {\n//     if (!chartRef.current) return;\n//     // Temporarily set the chart container to its full height to capture all content\n//     const originalHeight = chartRef.current.style.height;\n//     chartRef.current.style.height = `${chartRef.current.scrollHeight}px`;\n//     const canvas = await html2canvas(chartRef.current, {\n//       scrollX: 0,\n//       scrollY: -window.scrollY,\n//       width: chartRef.current.scrollWidth,\n//       height: chartRef.current.scrollHeight,\n//     });\n//     // Restore the original height of the chart container\n//     chartRef.current.style.height = originalHeight;\n//     const imgData = canvas.toDataURL(\"image/png\");\n//     const pdf = new jsPDF(\"landscape\", \"mm\", \"a4\");\n//     const imgProps = pdf.getImageProperties(imgData);\n//     const pdfWidth = pdf.internal.pageSize.getWidth();\n//     const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;\n//     pdf.addImage(imgData, \"PNG\", 0, 0, pdfWidth, pdfHeight);\n//     pdf.save(\"chart.pdf\");\n//   };\n//   return (\n//     <div className=\"flex flex-col md:flex-row h-screen border border-black\">\n//       <div className=\"w-full md:w-1/4 bg-white p-5 border-t md:border-l md:border-black\">\n//         <h2 className=\"text-lg font-bold mb-2\">Upload File</h2>\n//         <input type=\"file\" onChange={handleFileChange} className=\"border p-2 w-full\" />\n//         <button onClick={handleSubmit} className=\"bg-blue-500 text-white p-2 rounded flex items-center justify-center mt-4\">\n//           <BsUpload className=\"mr-2\" /> Submit\n//         </button>\n//         <div className=\"flex flex-col space-y-2 mt-4\">\n//           {[\"lineChartData\", \"barChartData\", \"scatterChartData\", \"pieChartData\", \"donutChartData\"].map((type) => (\n//             <button key={type} onClick={() => setSelectedChart(type)} className=\"p-2 bg-gray-300 rounded hover:bg-gray-400\">\n//               {type.replace(\"ChartData\", \" Chart\")}\n//             </button>\n//           ))}\n//         </div>\n//       </div>\n//       <div className=\"w-full md:w-3/4 bg-gray-100 p-5 overflow-auto\">\n//         {loading ? (\n//           <div className=\"flex justify-center items-center h-full\">\n//             <div className=\"spinner-border animate-spin border-t-4 border-blue-500 rounded-full w-12 h-12\"></div>\n//           </div>\n//         ) : (\n//           selectedChart && renderChart(selectedChart, { lineChartData: Line, barChartData: Bar, scatterChartData: Scatter, pieChartData: Pie, donutChartData: Doughnut }[selectedChart])\n//         )}\n//         <div className=\"mt-4 flex\">\n//           <input\n//             type=\"text\"\n//             value={inputValue}\n//             onChange={(e) => setInputValue(e.target.value)}\n//             className=\"border p-2 flex-grow mr-2 rounded\"\n//             placeholder=\"Enter your text here\"\n//           />\n//           <button onClick={handleSend} className=\"bg-green-500 text-white p-2 rounded\">\n//             Send\n//           </button>\n//         </div>\n//         <div className=\"mt-4 p-4 border border-gray-300 rounded bg-white\">\n//           <h3 className=\"text-lg font-bold mb-2\">Insights</h3>\n//           {combinedInsights ? (\n//             <ol className=\"list-decimal list-inside text-sm text-gray-700 bg-gray-100 p-2 rounded overflow-auto\">\n//               {combinedInsights.split('\\n').map((insight, index) => (\n//                 <ul key={index}>{insight}</ul>\n//               ))}\n//             </ol>\n//           ) : (\n//             <p className=\"text-gray-500\">No insights available.</p>\n//           )}\n//         </div>\n//         <button onClick={handleDownloadPDF} className=\"bg-red-500 text-white p-2 rounded mt-4\">\n//           Download as PDF\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\nchart_js__WEBPACK_IMPORTED_MODULE_4__.Chart.register(chart_js__WEBPACK_IMPORTED_MODULE_4__.CategoryScale, chart_js__WEBPACK_IMPORTED_MODULE_4__.LinearScale, chart_js__WEBPACK_IMPORTED_MODULE_4__.BarElement, chart_js__WEBPACK_IMPORTED_MODULE_4__.LineElement, chart_js__WEBPACK_IMPORTED_MODULE_4__.PointElement, chart_js__WEBPACK_IMPORTED_MODULE_4__.ArcElement, chart_js__WEBPACK_IMPORTED_MODULE_4__.Title, chart_js__WEBPACK_IMPORTED_MODULE_4__.Tooltip, chart_js__WEBPACK_IMPORTED_MODULE_4__.Legend, chartjs_plugin_zoom__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\nfunction Dashboard() {\n    _s();\n    const [chartData, setChartData] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        scatterChartData: null,\n        pieChartData: null,\n        donutChartData: null,\n        lineChartData: null,\n        barChartData: null\n    });\n    const [selectedFile, setSelectedFile] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    const [selectedChart, setSelectedChart] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"lineChartData\");\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [chartWidth, setChartWidth] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(0);\n    const [inputValue, setInputValue] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    const [storedProcessedData, setStoredProcessedData] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null); // New state to store processed data\n    const [combinedInsights, setCombinedInsights] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null); // Ref for the chart container\n    const handleFileChange = (event)=>{\n        var _event_target_files;\n        setSelectedFile(((_event_target_files = event.target.files) === null || _event_target_files === void 0 ? void 0 : _event_target_files[0]) || null);\n    };\n    const handleSubmit = async ()=>{\n        if (!selectedFile) return;\n        setLoading(true);\n        const formData = new FormData();\n        formData.append(\"file\", selectedFile);\n        try {\n            var _result_data, _result_data1;\n            const response = await fetch(\"http://localhost:3012/api/analyze-excel\", {\n                method: \"POST\",\n                body: formData\n            });\n            if (!response.ok) throw new Error(\"Error uploading file.\");\n            const result = await response.json();\n            const combinedInsights = (_result_data = result.data) === null || _result_data === void 0 ? void 0 : _result_data.combinedInsights;\n            const processedData = (_result_data1 = result.data) === null || _result_data1 === void 0 ? void 0 : _result_data1.processedData;\n            if (!processedData) throw new Error(\"Invalid response structure.\");\n            console.log(\"processedData\", processedData);\n            setStoredProcessedData(processedData); // Store the processed data\n            setCombinedInsights(combinedInsights);\n            const lightColors = [\n                \"rgba(173, 216, 230, 0.6)\",\n                \"rgba(144, 238, 144, 0.6)\",\n                \"rgba(255, 182, 193, 0.6)\",\n                \"rgba(255, 228, 181, 0.6)\",\n                \"rgba(221, 160, 221, 0.6)\",\n                \"rgba(240, 230, 140, 0.6)\"\n            ];\n            const generateChartData = (chartType)=>{\n                var _processedData_chartType;\n                const chartInfo = (_processedData_chartType = processedData[chartType]) === null || _processedData_chartType === void 0 ? void 0 : _processedData_chartType[0];\n                if (!chartInfo) return null;\n                const labels = Object.keys(chartInfo.data);\n                const values = Object.values(chartInfo.data);\n                console.log(\"chartType\", chartType);\n                let chartWidth = 0;\n                if ([\n                    \"Line Chart\"\n                ].includes(chartType)) {\n                    chartWidth = labels.length * 150;\n                } else if ([\n                    \"Bar Chart\"\n                ].includes(chartType)) {\n                    chartWidth = labels.length * 150; // Adjust the width for bar chart\n                } else if ([\n                    \"Scatter Plot\"\n                ].includes(chartType)) {\n                    chartWidth = labels.length * 150; // Adjust the width for bar chart\n                } else {\n                    chartWidth = 400; // Default width for other chart types\n                }\n                setChartWidth(chartWidth);\n                return {\n                    labels,\n                    datasets: [\n                        {\n                            label: chartInfo.label || chartType,\n                            data: values,\n                            backgroundColor: [\n                                \"Pie Chart\",\n                                \"Donut Chart\",\n                                \"Bar Chart\"\n                            ].includes(chartType) ? lightColors.slice(0, labels.length) : \"rgba(135, 206, 250, 0.6)\",\n                            borderColor: chartType.includes(\"Line\") ? \"rgba(135, 206, 250, 1)\" : undefined,\n                            fill: !chartType.includes(\"Line\")\n                        }\n                    ],\n                    meta: {\n                        header: chartInfo.header || \"default_header\",\n                        valueName: chartInfo.valueName || \"default_valueName\"\n                    }\n                };\n            };\n            setChartData({\n                scatterChartData: generateChartData(\"Scatter Plot\"),\n                pieChartData: generateChartData(\"Pie Chart\"),\n                donutChartData: generateChartData(\"Donut Chart\"),\n                lineChartData: generateChartData(\"Line Chart\"),\n                barChartData: generateChartData(\"Bar Chart\")\n            });\n        } catch (error) {\n            console.error(\"Error uploading file:\", error);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const handleSend = async ()=>{\n        var _graphData_meta, _graphData_meta1, _filteredProcessedData_selectedChartType_, _filteredProcessedData_selectedChartType;\n        if (!inputValue) return;\n        const graphData = chartData[selectedChart];\n        if (!graphData) return;\n        const labels = graphData.labels;\n        const values = graphData.datasets[0].data;\n        const dataObject = labels.reduce((obj, label, index)=>{\n            obj[label] = values[index];\n            return obj;\n        }, {});\n        const chartTypeMapping = {\n            lineChartData: \"Line Chart\",\n            pieChartData: \"Pie Chart\",\n            donutChartData: \"Donut Chart\",\n            barChartData: \"Bar Chart\",\n            scatterChartData: \"Scatter Plot\"\n        };\n        const selectedChartType = chartTypeMapping[selectedChart] || selectedChart;\n        // Filter the stored processed data to include only the selected chart's data\n        const filteredProcessedData = {\n            [selectedChartType]: storedProcessedData[selectedChartType]\n        };\n        const requestBody = {\n            question: inputValue,\n            processedData: {\n                // Include the stored processed data\n                [selectedChartType]: [\n                    {\n                        header: ((_graphData_meta = graphData.meta) === null || _graphData_meta === void 0 ? void 0 : _graphData_meta.header) || \"default_header\",\n                        valueName: ((_graphData_meta1 = graphData.meta) === null || _graphData_meta1 === void 0 ? void 0 : _graphData_meta1.valueName) || \"default_valueName\",\n                        label: graphData.datasets[0].label,\n                        data: (_filteredProcessedData_selectedChartType = filteredProcessedData[selectedChartType]) === null || _filteredProcessedData_selectedChartType === void 0 ? void 0 : (_filteredProcessedData_selectedChartType_ = _filteredProcessedData_selectedChartType[0]) === null || _filteredProcessedData_selectedChartType_ === void 0 ? void 0 : _filteredProcessedData_selectedChartType_.data\n                    }\n                ]\n            }\n        };\n        setLoading(true);\n        try {\n            var _result_data;\n            const response = await fetch(\"http://localhost:3012/api/answer-analyze-excel?question=\".concat(encodeURIComponent(inputValue)), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(requestBody)\n            });\n            if (!response.ok) throw new Error(\"Error uploading file.\");\n            setLoading(false);\n            const result = await response.json();\n            console.log(\"result.data\", result.data.data.combinedInsights);\n            setCombinedInsights(result.data.data.combinedInsights);\n            const processedData = (_result_data = result.data) === null || _result_data === void 0 ? void 0 : _result_data.processedData;\n            if (!processedData) throw new Error(\"Invalid response structure.\");\n            const generateChartData = (chartType)=>{\n                var _processedData_chartType;\n                const chartInfo = (_processedData_chartType = processedData[chartType]) === null || _processedData_chartType === void 0 ? void 0 : _processedData_chartType[0]; // Use only API response data\n                if (!chartInfo) return null;\n                const labels = Object.keys(chartInfo.data);\n                const values = Object.values(chartInfo.data);\n                let chartWidth = 0;\n                if ([\n                    \"Line Chart\"\n                ].includes(chartType)) {\n                    chartWidth = labels.length * 150;\n                } else if ([\n                    \"Bar Chart\"\n                ].includes(chartType)) {\n                    chartWidth = labels.length * 150; // Adjust the width for bar chart\n                } else if ([\n                    \"Scatter Plot\"\n                ].includes(chartType)) {\n                    chartWidth = labels.length * 150; // Adjust the width for bar chart\n                } else {\n                    chartWidth = 400; // Default width for other chart types\n                }\n                setChartWidth(chartWidth);\n                return {\n                    labels,\n                    datasets: [\n                        {\n                            label: chartInfo.label || chartType,\n                            data: values,\n                            backgroundColor: [\n                                \"Pie Chart\",\n                                \"Donut Chart\",\n                                \"Bar Chart\"\n                            ].includes(chartType) ? [\n                                \"rgba(173, 216, 230, 0.6)\",\n                                \"rgba(144, 238, 144, 0.6)\",\n                                \"rgba(255, 182, 193, 0.6)\"\n                            ] : \"rgba(135, 206, 250, 0.6)\",\n                            borderColor: chartType.includes(\"Line\") ? \"rgba(135, 206, 250, 1)\" : undefined,\n                            fill: !chartType.includes(\"Line\")\n                        }\n                    ],\n                    meta: {\n                        header: chartInfo.header || \"default_header\",\n                        valueName: chartInfo.valueName || \"default_valueName\"\n                    }\n                };\n            };\n            // Only update chartData without storing in storedProcessedData\n            setChartData((prevChartData)=>({\n                    ...prevChartData,\n                    [selectedChart]: generateChartData(selectedChartType)\n                }));\n        } catch (error) {\n            console.error(\"Error sending request:\", error);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const renderChart = (type, ChartComponent)=>{\n        const data = chartData === null || chartData === void 0 ? void 0 : chartData[type];\n        if (!loading && data) {\n            var _data_labels;\n            const dataLength = ((_data_labels = data.labels) === null || _data_labels === void 0 ? void 0 : _data_labels.length) || 0;\n            const maxTicks = Math.floor(600 / 30); // Approx 30px per vertical label\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"w-full overflow-x-auto overflow-y-hidden bg-white p-4 rounded-lg shadow\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    style: {\n                        width: \"100%\",\n                        minWidth: [\n                            \"lineChartData\",\n                            \"barChartData\"\n                        ].includes(type) ? Math.max(600, dataLength * 30) + \"px\" : \"100%\",\n                        height: \"400px\"\n                    },\n                    className: \"relative\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ChartComponent, {\n                        data: data,\n                        options: {\n                            responsive: true,\n                            maintainAspectRatio: false,\n                            scales: {\n                                x: {\n                                    min: 0,\n                                    ticks: {\n                                        autoSkip: false,\n                                        maxTicksLimit: maxTicks,\n                                        maxRotation: 90,\n                                        minRotation: 90,\n                                        padding: 10,\n                                        font: {\n                                            size: 12\n                                        },\n                                        align: 'center',\n                                        // Ensure last labels don't overlap\n                                        callback: function(_value, index, values) {\n                                            // Skip rendering if too close to the end\n                                            if (index === values.length - 1 && dataLength > maxTicks) {\n                                                return null; // Hide last label if it might overlap\n                                            }\n                                            return data.labels[index];\n                                        }\n                                    },\n                                    grid: {\n                                        display: false\n                                    }\n                                },\n                                y: {\n                                    beginAtZero: true\n                                }\n                            },\n                            plugins: {\n                                legend: {\n                                    display: true,\n                                    position: \"top\"\n                                },\n                                tooltip: {\n                                    enabled: true,\n                                    intersect: false,\n                                    mode: 'index'\n                                }\n                            },\n                            layout: {\n                                padding: {\n                                    left: 30,\n                                    right: 30,\n                                    bottom: 40\n                                }\n                            }\n                        }\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                        lineNumber: 1975,\n                        columnNumber: 13\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                    lineNumber: 1965,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                lineNumber: 1964,\n                columnNumber: 9\n            }, this);\n        }\n        return null;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"jsx-ee216b23b408fc3d\" + \" \" + \"flex flex-col w-full md:flex-row h-screen border border-black\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"jsx-ee216b23b408fc3d\" + \" \" + \"w-full md:w-1/4 bg-white p-5 border-t md:border-l md:border-black\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"jsx-ee216b23b408fc3d\" + \" \" + \"text-lg font-bold mb-2\",\n                        children: \"Upload File\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                        lineNumber: 2042,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                        type: \"file\",\n                        onChange: handleFileChange,\n                        className: \"jsx-ee216b23b408fc3d\" + \" \" + \"border p-2 w-full\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                        lineNumber: 2043,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: handleSubmit,\n                        className: \"jsx-ee216b23b408fc3d\" + \" \" + \"bg-blue-500 text-white p-2 rounded flex items-center justify-center mt-4\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_BsUpload_react_icons_bs__WEBPACK_IMPORTED_MODULE_5__.BsUpload, {\n                                className: \"mr-2\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                                lineNumber: 2045,\n                                columnNumber: 11\n                            }, this),\n                            \" Submit\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                        lineNumber: 2044,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"jsx-ee216b23b408fc3d\" + \" \" + \"flex flex-col space-y-2 mt-4\",\n                        children: [\n                            \"lineChartData\",\n                            \"barChartData\",\n                            \"scatterChartData\",\n                            \"pieChartData\",\n                            \"donutChartData\"\n                        ].map((type)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>setSelectedChart(type),\n                                className: \"jsx-ee216b23b408fc3d\" + \" \" + \"p-2 bg-gray-300 rounded hover:bg-gray-400\",\n                                children: type.replace(\"ChartData\", \" Chart\")\n                            }, type, false, {\n                                fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                                lineNumber: 2049,\n                                columnNumber: 13\n                            }, this))\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                        lineNumber: 2047,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                lineNumber: 2041,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"jsx-ee216b23b408fc3d\" + \" \" + \"w-full md:w-3/4 bg-gray-100 p-5\",\n                children: [\n                    loading ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"jsx-ee216b23b408fc3d\" + \" \" + \"flex justify-center items-center h-full\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"jsx-ee216b23b408fc3d\" + \" \" + \"spinner-border animate-spin border-t-4 border-blue-500 rounded-full w-12 h-12\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                            lineNumber: 2058,\n                            columnNumber: 7\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                        lineNumber: 2057,\n                        columnNumber: 5\n                    }, this) : selectedChart && renderChart(selectedChart, {\n                        lineChartData: react_chartjs_2__WEBPACK_IMPORTED_MODULE_6__.Line,\n                        barChartData: react_chartjs_2__WEBPACK_IMPORTED_MODULE_6__.Bar,\n                        scatterChartData: react_chartjs_2__WEBPACK_IMPORTED_MODULE_6__.Scatter,\n                        pieChartData: react_chartjs_2__WEBPACK_IMPORTED_MODULE_6__.Pie,\n                        donutChartData: react_chartjs_2__WEBPACK_IMPORTED_MODULE_6__.Doughnut\n                    }[selectedChart]),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"jsx-ee216b23b408fc3d\" + \" \" + \"mt-4 flex\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                type: \"text\",\n                                value: inputValue,\n                                onChange: (e)=>setInputValue(e.target.value),\n                                placeholder: \"Enter your text here\",\n                                className: \"jsx-ee216b23b408fc3d\" + \" \" + \"border p-2 flex-grow mr-2 rounded\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                                lineNumber: 2070,\n                                columnNumber: 5\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: handleSend,\n                                className: \"jsx-ee216b23b408fc3d\" + \" \" + \"bg-green-500 text-white p-2 rounded\",\n                                children: \"Send\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                                lineNumber: 2077,\n                                columnNumber: 5\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                        lineNumber: 2069,\n                        columnNumber: 3\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"jsx-ee216b23b408fc3d\" + \" \" + \"mt-4 p-4 border border-gray-300 rounded bg-white\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                className: \"jsx-ee216b23b408fc3d\" + \" \" + \"text-lg font-bold mb-2\",\n                                children: \"Insights\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                                lineNumber: 2082,\n                                columnNumber: 5\n                            }, this),\n                            combinedInsights ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ol\", {\n                                className: \"jsx-ee216b23b408fc3d\" + \" \" + \"list-decimal list-inside text-sm text-gray-700 bg-gray-100 p-2 rounded max-h-60 overflow-y-auto\",\n                                children: combinedInsights.split('\\n').map((insight, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                        className: \"jsx-ee216b23b408fc3d\" + \" \" + \"py-1\",\n                                        children: insight\n                                    }, index, false, {\n                                        fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                                        lineNumber: 2086,\n                                        columnNumber: 11\n                                    }, this))\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                                lineNumber: 2084,\n                                columnNumber: 7\n                            }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"jsx-ee216b23b408fc3d\" + \" \" + \"text-gray-500\",\n                                children: \"No insights available.\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                                lineNumber: 2090,\n                                columnNumber: 7\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                        lineNumber: 2081,\n                        columnNumber: 3\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n                lineNumber: 2055,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default()), {\n                id: \"ee216b23b408fc3d\",\n                children: \".overflow-x-auto.jsx-ee216b23b408fc3d{-webkit-overflow-scrolling:touch;scrollbar-width:thin;scrollbar-color:#888#f1f1f1}.overflow-x-auto.jsx-ee216b23b408fc3d::-webkit-scrollbar{height:8px}.overflow-x-auto.jsx-ee216b23b408fc3d::-webkit-scrollbar-thumb{background:#888;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.overflow-x-auto.jsx-ee216b23b408fc3d::-webkit-scrollbar-track{background:#f1f1f1}@media(max-width:768px){.overflow-x-auto.jsx-ee216b23b408fc3d>div.jsx-ee216b23b408fc3d{min-width:400px;height:300px}}\"\n            }, void 0, false, void 0, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\Mukesh.kasimahanthi\\\\Desktop\\\\visulization\\\\aiAgentFrontendCode\\\\src\\\\app\\\\pages\\\\Upload\\\\Upload.tsx\",\n        lineNumber: 2040,\n        columnNumber: 5\n    }, this);\n}\n_s(Dashboard, \"P/Zh0x9l01YSUrGDOmP3n5Y2uFs=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/pages/Upload/Upload.tsx\n"));

/***/ })

});